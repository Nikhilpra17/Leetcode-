public int maxProfit(int[] prices) {
     
        //Brute Force Approach 
        // TC = O(N^2) and SC = O(1)
        
//         int profit =0;
        
//         for (int buy = 0; buy<prices.length; buy++){
//             for (int sell = buy +1 ; sell < prices.length; sell ++){
//                 int difference = (prices[sell] - prices[buy]);
               
//                 if (difference > profit){
//                     profit = difference ;
//                 }
//             }
//         }
        
//      return profit;
        
        // Optimized Approched 
        // TC = O(N) and SC = O(1)
        
        int profit =0;
        int min = Integer.MAX_VALUE;
        int max = 0;
        for (int i =0; i< prices.length; i++ ){
            if (prices[i]< min){
            min = prices[i];
                max = 0;
            } else if (prices[i]> max){
                max = prices[i];
            }
            int difference = max-min;
            if (difference > profit){
                profit = difference;
            }
            // Approach used in LEETCODE
            // profit = Math.max(profit, prices[i]- min);
            
        }
        
        return profit;
        
    }
}
