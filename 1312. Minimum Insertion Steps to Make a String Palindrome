class Solution {
    public int minInsertions(String s) {
        int val = longestPalindromeSubseq(s);
        
        int len = s.length();
        
        return len - val;
    }
    
    public int longestPalindromeSubseq(String s) {
     String test = reverse(s);
        int len = s.length();
        
        return LCS(s, len, test, len);
        
    }
    public int LCS(String A, int x, String B, int y){
        int dp[][] = new int[x+1][y+1];
        
        for (int i = 0 ; i < dp.length ; i ++){
            dp[i][0] = 0 ;
        }
        
        for (int i = 0 ; i < dp[0].length ; i ++){
            dp[0][i] = 0 ;
        }
        
        for (int i = 1 ;i < dp.length ; i ++){
            for (int j = 1 ; j < dp[0].length; j ++){
                if (A.charAt(i-1) == B.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = Math.max (dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        
        return dp[x][y];
    }
    
    
    public String reverse(String A){
        String ans = "";
        
        for (int i = A.length()-1 ; i >=0 ; i--){
            ans += A.charAt(i);
        }
        
        return ans ;
    }
}
