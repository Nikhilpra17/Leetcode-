class Solution {
    public int largestRectangleArea(int[] heights) {
        int higharea = 0;
        int [] binx, ainx = new int [heights.length];
        binx = previous(heights);
        ainx = afterward(heights);
        
        for (int i = 0; i< heights.length ; i++){
            int ti = (ainx[i] - binx[i] -1)* heights[i];
            if (ti > higharea){
                higharea = ti;
            }
        }
        
        return higharea;
        
    }
     public int[] previous(int[] heights){
        int[] before = new int[heights.length];
        Stack<Integer> s = new Stack<>();
        
        for (int i =0 ; i< heights.length ; i++){
            while ( ! s.isEmpty() && heights[s.peek()] >= heights[i] ){
                s.pop();
            }
            if (s.isEmpty()){
                before[i] = -1;
            } else {
                before[i] = s.peek();
            }
            s.push(i);
        }
        return before;
    }
    
