class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0 ; 
        
        for (int i = 0 ; i < nums.length ; i++){
            sum += nums[i] ; 
        }
        
        if (sum % 2 != 0){
            return false;
        }
        
        int range = sum / 2 ;
        
        
        return subSet(nums, range, nums.length);
        
    }
 public boolean subSet( int[] nums , int range, int n){
        boolean dp[][] = new boolean[n+1][range+1];
        
        for(int i = 0 ; i < dp[0].length ; i ++){
            dp[0][i] = false ;
        }
        
        for (int i = 0 ; i < dp.length ; i ++){
            dp[i][0] = true;
        }
        
        for (int i = 1 ; i < n+1 ; i ++){
            for (int j = 1 ; j < range+1 ; j ++){
                if (nums[i-1] > j){
                  dp [i][j] = dp[i-1][j];   
                } else {
                    if (j-nums[i-1] >= 0){
                        dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j] ;
                    } else {
                        dp [i][j] = dp[i-1][j];
                    }
                }
            }
        }
      return dp[n][range];
    }
}
