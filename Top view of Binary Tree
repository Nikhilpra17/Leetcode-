class Solution
{
	/*
		A binary tree node is defined as:

		class Node
		{
			int data;			// data field
			Node left, right;	// pointer to the left and right child

			Node() {}
			Node(int data) { this.data = data; this.left = this.right = null; }
		}
	*/
	
	public static List<Integer> findTopView(Node root)
	{
		// Write your code here...
		ArrayList<Integer> ans = new ArrayList<>();
		
		if (root == null){
			return ans;
		}
		
		Queue<pair> queue = new ArrayDeque<>();
		Map<Integer, Integer> map = new TreeMap<>();
		
		queue.add(new pair(0, root));
		
		while (!queue.isEmpty()){
			pair temp = queue.remove();
			
			if (!map.containsKey(temp.hd)){
				map.put(temp.hd, temp.node.data);
			}
			
			if (temp.node.left != null){
				queue.add(new pair(temp.hd-1, temp.node.left));
			}
			
			if (temp.node.right != null){
				queue.add(new pair(temp.hd+1, temp.node.right));
			}
		}
		
		for (Map.Entry<Integer, Integer> mapElement: map.entrySet()){
			ans.add(mapElement.getValue());
		}
		return ans;
	}
	
	
